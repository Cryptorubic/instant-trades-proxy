import { SignerWithAddress } from '@nomiclabs/hardhat-ethers/signers';
import { expect } from 'chai';
import { ethers } from 'hardhat';
import {
    availableFeeValues,
    feeDivisor,
    promoterFee,
    providerBaseFee,
    providerDiscountFee
} from '../../utils/fee-constants';
import { DexProxy as DexProxyType } from '../../../typechain';
import { TOKENS } from '../../utils/tokens';
import {
    getBalance,
    getTransactionFeeByReceipt,
    resetNetwork,
    setTokenBalance,
    toWei
} from '../../utils/blockchain';

describe('DexProxy with 1inch', function () {
    const oneInchSwapAddress = '0x11111112542d85b3ef69ae05771c2dccff4faa26';

    let dexProxy: DexProxyType;
    let alice: SignerWithAddress;
    let integratorAddress: string;
    let promoterAddress: string;
    let providerAddress: string;

    beforeEach(async () => {
        await resetNetwork(14528327);
        const signers = await ethers.getSigners();
        alice = signers[1];
        integratorAddress = signers[2].address;
        promoterAddress = signers[3].address;
        providerAddress = signers[4].address;

        const DexProxy = await ethers.getContractFactory('DexProxy');
        dexProxy = await DexProxy.deploy(
            promoterFee,
            providerBaseFee,
            providerDiscountFee,
            providerAddress,
            availableFeeValues,
            [oneInchSwapAddress]
        );
    });

    it('Should give correct fee in swap NATIVE-ERC20 with promoter.', async () => {
        const fromToken = TOKENS.BNB;
        const toToken = TOKENS.BUSD;
        const amount = toWei('0.01', fromToken.decimals);
        const expectedToAmount = toWei('4.650415713992117219', toToken.decimals);
        const oneInchSwapCallData = `0x7c025200000000000000000000000000baf9a5d4b0052359326a6cdab54babaa3a3a964300000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000180000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee000000000000000000000000e9e7cea3dedca5984780bafc599bd69add087d56000000000000000000000000baf9a5d4b0052359326a6cdab54babaa3a3a9643000000000000000000000000${dexProxy.address.slice(
            2
        )}000000000000000000000000000000000000000000000000002386f26fc100000000000000000000000000000000000000000000000000003eb7c70d6c2597a700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006600000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000026000000000000000000000000000000000000000000000000000000000000003c0000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002386f26fc1000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000004d0e30db00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000064d1660f99000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c00000000000000000000000051e6d27fa57373d8d4c256231241053a70cb1d93000000000000000000000000000000000000000000000000002386f26fc1000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000a4b757fed600000000000000000000000051e6d27fa57373d8d4c256231241053a70cb1d93000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c000000000000000000000000e9e7cea3dedca5984780bafc599bd69add087d560000000000000000001e8480baf9a5d4b0052359326a6cdab54babaa3a3a9643000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000001a4b3af37c000000000000000000000000000000000000000000000000000000000000000808000000000000000000000000000000000000000000000000000000000000044000000000000000000000000e9e7cea3dedca5984780bafc599bd69add087d56000000000000000000000000000000010000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000064d1660f99000000000000000000000000e9e7cea3dedca5984780bafc599bd69add087d56000000000000000000000000${dexProxy.address.slice(
            2
        )}00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cfee7c08`;
        const integratorFee = availableFeeValues[0];

        const aliceFromTokenBalanceBefore = await getBalance(alice.address, fromToken.address);
        const aliceToTokenBalanceBefore = await getBalance(alice.address, toToken.address);
        const integratorToTokenBalanceBefore = await getBalance(integratorAddress, toToken.address);
        const promoterToTokenBalanceBefore = await getBalance(promoterAddress, toToken.address);
        const providerToTokenBalanceBefore = await getBalance(providerAddress, toToken.address);

        dexProxy = dexProxy.connect(alice);
        const swapTransaction = await dexProxy.swapWithPromoter(
            fromToken.address,
            toToken.address,
            amount,
            oneInchSwapAddress,
            oneInchSwapCallData,
            {
                fee: integratorFee,
                feeTarget: integratorAddress
            },
            promoterAddress,
            {
                value: amount
            }
        );
        const swapTransactionReceipt = await swapTransaction.wait();

        const aliceFromTokenBalanceAfter = await getBalance(alice.address, fromToken.address);
        const aliceToTokenBalanceAfter = await getBalance(alice.address, toToken.address);
        const integratorToTokenBalanceAfter = await getBalance(integratorAddress, toToken.address);
        const promoterToTokenBalanceAfter = await getBalance(promoterAddress, toToken.address);
        const providerToTokenBalanceAfter = await getBalance(providerAddress, toToken.address);

        const swapTransactionFee = await getTransactionFeeByReceipt(swapTransactionReceipt);

        const integratorFeeBonus = providerBaseFee - providerDiscountFee - promoterFee;
        const expectedIntegratorToTokenBalanceAfter = integratorToTokenBalanceBefore.add(
            expectedToAmount.mul(integratorFee + integratorFeeBonus).div(feeDivisor)
        );
        const expectedPromoterToTokenBalanceAfter = promoterToTokenBalanceBefore.add(
            expectedToAmount.mul(promoterFee).div(feeDivisor)
        );
        const expectedProviderToTokenBalanceAfter = providerToTokenBalanceBefore.add(
            expectedToAmount.mul(providerDiscountFee).div(feeDivisor)
        );
        const expectedAliceToTokenBalanceAfter = aliceToTokenBalanceBefore
            .add(expectedToAmount)
            .sub(expectedToAmount.mul(integratorFee + integratorFeeBonus).div(feeDivisor))
            .sub(expectedToAmount.mul(promoterFee).div(feeDivisor))
            .sub(expectedToAmount.mul(providerDiscountFee).div(feeDivisor));
        const expectedAliceFromTokenBalanceAfter = aliceFromTokenBalanceBefore
            .sub(swapTransactionFee)
            .sub(amount);

        expect(swapTransactionReceipt.status).to.be.eq(1);
        expect(integratorToTokenBalanceAfter.eq(expectedIntegratorToTokenBalanceAfter)).to.be.eq(
            true
        );
        expect(promoterToTokenBalanceAfter).to.be.eq(expectedPromoterToTokenBalanceAfter);
        expect(providerToTokenBalanceAfter).to.be.eq(expectedProviderToTokenBalanceAfter);
        expect(aliceToTokenBalanceAfter).to.be.eq(expectedAliceToTokenBalanceAfter);
        expect(aliceFromTokenBalanceAfter).to.be.eq(expectedAliceFromTokenBalanceAfter);
    });

    it('Should give correct fee in swap ERC20-NATIVE with promoter.', async () => {
        const fromToken = TOKENS.BUSD;
        const toToken = TOKENS.BNB;
        const amount = toWei('1', fromToken.decimals);
        const expectedToAmount = toWei('0.002145920925289000', toToken.decimals);
        const oneInchSwapCallData = `0x7c025200000000000000000000000000baf9a5d4b0052359326a6cdab54babaa3a3a964300000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000180000000000000000000000000e9e7cea3dedca5984780bafc599bd69add087d56000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee000000000000000000000000baf9a5d4b0052359326a6cdab54babaa3a3a9643000000000000000000000000${dexProxy.address.slice(
            2
        )}0000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000000000000000000000000000000007854feadc318300000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007c000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000052000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000064d1660f99000000000000000000000000e9e7cea3dedca5984780bafc599bd69add087d560000000000000000000000001b96b92314c44b159149f7e0303511fb2fc4774f0000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000a4b757fed60000000000000000000000001b96b92314c44b159149f7e0303511fb2fc4774f000000000000000000000000e9e7cea3dedca5984780bafc599bd69add087d56000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c0000000000000000001e8480baf9a5d4b0052359326a6cdab54babaa3a3a964300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000164b3af37c000000000000000000000000000000000000000000000000000000000000000808000000000000000000000000000000000000000000000000000000000000004000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c0000000000000000000000000000000100000000000000000000000000000001800000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000242e1a7d4d00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000001a4b3af37c000000000000000000000000000000000000000000000000000000000000000808000000000000000000000000000000000000000000000000000000000000044000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee000000000000000000000000000000010000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000064d1660f99000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee000000000000000000000000${dexProxy.address.slice(
            2
        )}00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cfee7c08`;
        const integratorFee = availableFeeValues[0];

        await setTokenBalance(fromToken.address, amount, alice.address);

        const aliceFromTokenBalanceBefore = await getBalance(alice.address, fromToken.address);
        const aliceToTokenBalanceBefore = await getBalance(alice.address, toToken.address);
        const integratorToTokenBalanceBefore = await getBalance(integratorAddress, toToken.address);
        const promoterToTokenBalanceBefore = await getBalance(promoterAddress, toToken.address);
        const providerToTokenBalanceBefore = await getBalance(providerAddress, toToken.address);

        const busdContract = await ethers.getContractAt('IERC20', fromToken.address, alice);
        const approveTransaction = await busdContract.approve(dexProxy.address, amount);
        const approveTransactionReceipt = await approveTransaction.wait();

        dexProxy = dexProxy.connect(alice);
        const swapTransaction = await dexProxy.swapWithPromoter(
            fromToken.address,
            toToken.address,
            amount,
            oneInchSwapAddress,
            oneInchSwapCallData,
            {
                fee: integratorFee,
                feeTarget: integratorAddress
            },
            promoterAddress
        );
        const swapTransactionReceipt = await swapTransaction.wait();

        const aliceFromTokenBalanceAfter = await getBalance(alice.address, fromToken.address);
        const aliceToTokenBalanceAfter = await getBalance(alice.address, toToken.address);
        const integratorToTokenBalanceAfter = await getBalance(integratorAddress, toToken.address);
        const promoterToTokenBalanceAfter = await getBalance(promoterAddress, toToken.address);
        const providerToTokenBalanceAfter = await getBalance(providerAddress, toToken.address);

        const approveTransactionFee = await getTransactionFeeByReceipt(approveTransactionReceipt);
        const swapTransactionFee = await getTransactionFeeByReceipt(swapTransactionReceipt);

        const integratorFeeBonus = providerBaseFee - providerDiscountFee - promoterFee;
        const expectedIntegratorToTokenBalanceAfter = integratorToTokenBalanceBefore.add(
            expectedToAmount.mul(integratorFee + integratorFeeBonus).div(feeDivisor)
        );
        const expectedPromoterToTokenBalanceAfter = promoterToTokenBalanceBefore.add(
            expectedToAmount.mul(promoterFee).div(feeDivisor)
        );
        const expectedProviderToTokenBalanceAfter = providerToTokenBalanceBefore.add(
            expectedToAmount.mul(providerDiscountFee).div(feeDivisor)
        );
        const expectedAliceToTokenBalanceAfter = aliceToTokenBalanceBefore
            .sub(approveTransactionFee)
            .sub(swapTransactionFee)
            .add(expectedToAmount)
            .sub(expectedToAmount.mul(integratorFee + integratorFeeBonus).div(feeDivisor))
            .sub(expectedToAmount.mul(promoterFee).div(feeDivisor))
            .sub(expectedToAmount.mul(providerDiscountFee).div(feeDivisor));
        const expectedAliceFromTokenBalanceAfter = aliceFromTokenBalanceBefore.sub(amount);

        expect(swapTransactionReceipt.status).to.be.eq(1);
        expect(integratorToTokenBalanceAfter).to.be.eq(expectedIntegratorToTokenBalanceAfter);
        expect(promoterToTokenBalanceAfter).to.be.eq(expectedPromoterToTokenBalanceAfter);
        expect(providerToTokenBalanceAfter).to.be.eq(expectedProviderToTokenBalanceAfter);
        expect(aliceToTokenBalanceAfter).to.be.eq(expectedAliceToTokenBalanceAfter);
        expect(aliceFromTokenBalanceAfter).to.be.eq(expectedAliceFromTokenBalanceAfter);
    });

    it('Should give correct fee in swap ERC20-ERC20 with promoter.', async () => {
        const fromToken = TOKENS.BUSD;
        const toToken = TOKENS.CAKE;
        const amount = toWei('1', fromToken.decimals);
        const expectedToAmount = toWei('0.092700258038179557', toToken.decimals);
        const oneInchSwapCallData = `0x7c025200000000000000000000000000baf9a5d4b0052359326a6cdab54babaa3a3a964300000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000180000000000000000000000000e9e7cea3dedca5984780bafc599bd69add087d560000000000000000000000000e09fabb73bd3ade0a17ecc321fd13a19e81ce82000000000000000000000000804678fa97d91b974ec2af3c843270886528a9e6000000000000000000000000${dexProxy.address.slice(
            2
        )}0000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000001448cf3bc270b7000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001ca4b757fed6000000000000000000000000804678fa97d91b974ec2af3c843270886528a9e6000000000000000000000000e9e7cea3dedca5984780bafc599bd69add087d560000000000000000000000000e09fabb73bd3ade0a17ecc321fd13a19e81ce820000000000000000002625a0${dexProxy.address.slice(
            2
        )}000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cfee7c08`;
        const integratorFee = availableFeeValues[0];

        await setTokenBalance(fromToken.address, amount, alice.address);

        const aliceFromTokenBalanceBefore = await getBalance(alice.address, fromToken.address);
        const aliceToTokenBalanceBefore = await getBalance(alice.address, toToken.address);
        const integratorToTokenBalanceBefore = await getBalance(integratorAddress, toToken.address);
        const promoterToTokenBalanceBefore = await getBalance(promoterAddress, toToken.address);
        const providerToTokenBalanceBefore = await getBalance(providerAddress, toToken.address);

        const busdContract = await ethers.getContractAt('IERC20', fromToken.address, alice);
        await busdContract.approve(dexProxy.address, amount);

        dexProxy = dexProxy.connect(alice);
        const swapTransaction = await dexProxy.swapWithPromoter(
            fromToken.address,
            toToken.address,
            amount,
            oneInchSwapAddress,
            oneInchSwapCallData,
            {
                fee: integratorFee,
                feeTarget: integratorAddress
            },
            promoterAddress
        );
        const swapTransactionReceipt = await swapTransaction.wait();

        const aliceFromTokenBalanceAfter = await getBalance(alice.address, fromToken.address);
        const aliceToTokenBalanceAfter = await getBalance(alice.address, toToken.address);
        const integratorToTokenBalanceAfter = await getBalance(integratorAddress, toToken.address);
        const promoterToTokenBalanceAfter = await getBalance(promoterAddress, toToken.address);
        const providerToTokenBalanceAfter = await getBalance(providerAddress, toToken.address);

        const integratorFeeBonus = providerBaseFee - providerDiscountFee - promoterFee;
        const expectedIntegratorToTokenBalanceAfter = integratorToTokenBalanceBefore.add(
            expectedToAmount.mul(integratorFee + integratorFeeBonus).div(feeDivisor)
        );
        const expectedPromoterToTokenBalanceAfter = promoterToTokenBalanceBefore.add(
            expectedToAmount.mul(promoterFee).div(feeDivisor)
        );
        const expectedProviderToTokenBalanceAfter = providerToTokenBalanceBefore.add(
            expectedToAmount.mul(providerDiscountFee).div(feeDivisor)
        );
        const expectedAliceToTokenBalanceAfter = aliceToTokenBalanceBefore
            .add(expectedToAmount)
            .sub(expectedToAmount.mul(integratorFee + integratorFeeBonus).div(feeDivisor))
            .sub(expectedToAmount.mul(promoterFee).div(feeDivisor))
            .sub(expectedToAmount.mul(providerDiscountFee).div(feeDivisor));
        const expectedAliceFromTokenBalanceAfter = aliceFromTokenBalanceBefore.sub(amount);

        expect(swapTransactionReceipt.status).to.be.eq(1);
        expect(integratorToTokenBalanceAfter).to.be.eq(expectedIntegratorToTokenBalanceAfter);
        expect(promoterToTokenBalanceAfter).to.be.eq(expectedPromoterToTokenBalanceAfter);
        expect(providerToTokenBalanceAfter).to.be.eq(expectedProviderToTokenBalanceAfter);
        expect(aliceToTokenBalanceAfter).to.be.eq(expectedAliceToTokenBalanceAfter);
        expect(aliceFromTokenBalanceAfter).to.be.eq(expectedAliceFromTokenBalanceAfter);
    });

    it('Should give correct fee in swap NATIVE-ERC20 without promoter.', async () => {
        const fromToken = TOKENS.BNB;
        const toToken = TOKENS.BUSD;
        const amount = toWei('0.01', fromToken.decimals);
        const expectedToAmount = toWei('4.650415713992117219', toToken.decimals);
        const oneInchSwapCallData = `0x7c025200000000000000000000000000baf9a5d4b0052359326a6cdab54babaa3a3a964300000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000180000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee000000000000000000000000e9e7cea3dedca5984780bafc599bd69add087d56000000000000000000000000baf9a5d4b0052359326a6cdab54babaa3a3a9643000000000000000000000000${dexProxy.address.slice(
            2
        )}000000000000000000000000000000000000000000000000002386f26fc100000000000000000000000000000000000000000000000000003eb7c70d6c2597a700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006600000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000026000000000000000000000000000000000000000000000000000000000000003c0000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002386f26fc1000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000004d0e30db00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000064d1660f99000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c00000000000000000000000051e6d27fa57373d8d4c256231241053a70cb1d93000000000000000000000000000000000000000000000000002386f26fc1000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000a4b757fed600000000000000000000000051e6d27fa57373d8d4c256231241053a70cb1d93000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c000000000000000000000000e9e7cea3dedca5984780bafc599bd69add087d560000000000000000001e8480baf9a5d4b0052359326a6cdab54babaa3a3a9643000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000001a4b3af37c000000000000000000000000000000000000000000000000000000000000000808000000000000000000000000000000000000000000000000000000000000044000000000000000000000000e9e7cea3dedca5984780bafc599bd69add087d56000000000000000000000000000000010000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000064d1660f99000000000000000000000000e9e7cea3dedca5984780bafc599bd69add087d56000000000000000000000000${dexProxy.address.slice(
            2
        )}00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cfee7c08`;
        const integratorFee = availableFeeValues[0];

        const aliceFromTokenBalanceBefore = await getBalance(alice.address, fromToken.address);
        const aliceToTokenBalanceBefore = await getBalance(alice.address, toToken.address);
        const integratorToTokenBalanceBefore = await getBalance(integratorAddress, toToken.address);
        const providerToTokenBalanceBefore = await getBalance(providerAddress, toToken.address);

        dexProxy = dexProxy.connect(alice);
        const swapTransaction = await dexProxy.swap(
            fromToken.address,
            toToken.address,
            amount,
            oneInchSwapAddress,
            oneInchSwapCallData,
            {
                fee: integratorFee,
                feeTarget: integratorAddress
            },
            {
                value: amount
            }
        );
        const swapTransactionReceipt = await swapTransaction.wait();

        const aliceFromTokenBalanceAfter = await getBalance(alice.address, fromToken.address);
        const aliceToTokenBalanceAfter = await getBalance(alice.address, toToken.address);
        const integratorToTokenBalanceAfter = await getBalance(integratorAddress, toToken.address);
        const providerToTokenBalanceAfter = await getBalance(providerAddress, toToken.address);

        const swapTransactionFee = await getTransactionFeeByReceipt(swapTransactionReceipt);

        const expectedIntegratorToTokenBalanceAfter = integratorToTokenBalanceBefore.add(
            expectedToAmount.mul(integratorFee).div(feeDivisor)
        );
        const expectedProviderToTokenBalanceAfter = providerToTokenBalanceBefore.add(
            expectedToAmount.mul(providerBaseFee).div(feeDivisor)
        );
        const expectedAliceToTokenBalanceAfter = aliceToTokenBalanceBefore
            .add(expectedToAmount)
            .sub(expectedToAmount.mul(integratorFee).div(feeDivisor))
            .sub(expectedToAmount.mul(providerBaseFee).div(feeDivisor));
        const expectedAliceFromTokenBalanceAfter = aliceFromTokenBalanceBefore
            .sub(swapTransactionFee)
            .sub(amount);

        expect(swapTransactionReceipt.status).to.be.eq(1);
        expect(integratorToTokenBalanceAfter).to.be.eq(expectedIntegratorToTokenBalanceAfter);
        expect(providerToTokenBalanceAfter).to.be.eq(expectedProviderToTokenBalanceAfter);
        expect(aliceToTokenBalanceAfter).to.be.eq(expectedAliceToTokenBalanceAfter);
        expect(aliceFromTokenBalanceAfter).to.be.eq(expectedAliceFromTokenBalanceAfter);
    });

    it('Should give correct fee in swap ERC20-NATIVE without promoter.', async () => {
        const fromToken = TOKENS.BUSD;
        const toToken = TOKENS.BNB;
        const amount = toWei('1', fromToken.decimals);
        const expectedToAmount = toWei('0.002145920925289000', toToken.decimals);
        const oneInchSwapCallData = `0x7c025200000000000000000000000000baf9a5d4b0052359326a6cdab54babaa3a3a964300000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000180000000000000000000000000e9e7cea3dedca5984780bafc599bd69add087d56000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee000000000000000000000000baf9a5d4b0052359326a6cdab54babaa3a3a9643000000000000000000000000${dexProxy.address.slice(
            2
        )}0000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000000000000000000000000000000007854feadc318300000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007c000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000052000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000064d1660f99000000000000000000000000e9e7cea3dedca5984780bafc599bd69add087d560000000000000000000000001b96b92314c44b159149f7e0303511fb2fc4774f0000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000a4b757fed60000000000000000000000001b96b92314c44b159149f7e0303511fb2fc4774f000000000000000000000000e9e7cea3dedca5984780bafc599bd69add087d56000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c0000000000000000001e8480baf9a5d4b0052359326a6cdab54babaa3a3a964300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000164b3af37c000000000000000000000000000000000000000000000000000000000000000808000000000000000000000000000000000000000000000000000000000000004000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c0000000000000000000000000000000100000000000000000000000000000001800000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000242e1a7d4d00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000001a4b3af37c000000000000000000000000000000000000000000000000000000000000000808000000000000000000000000000000000000000000000000000000000000044000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee000000000000000000000000000000010000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000064d1660f99000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee000000000000000000000000${dexProxy.address.slice(
            2
        )}00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cfee7c08`;
        const integratorFee = availableFeeValues[0];

        await setTokenBalance(fromToken.address, amount, alice.address);

        const aliceFromTokenBalanceBefore = await getBalance(alice.address, fromToken.address);
        const aliceToTokenBalanceBefore = await getBalance(alice.address, toToken.address);
        const integratorToTokenBalanceBefore = await getBalance(integratorAddress, toToken.address);
        const providerToTokenBalanceBefore = await getBalance(providerAddress, toToken.address);

        const busdContract = await ethers.getContractAt('IERC20', fromToken.address, alice);
        const approveTransaction = await busdContract.approve(dexProxy.address, amount);
        const approveTransactionReceipt = await approveTransaction.wait();

        dexProxy = dexProxy.connect(alice);
        const swapTransaction = await dexProxy.swap(
            fromToken.address,
            toToken.address,
            amount,
            oneInchSwapAddress,
            oneInchSwapCallData,
            {
                fee: integratorFee,
                feeTarget: integratorAddress
            }
        );
        const swapTransactionReceipt = await swapTransaction.wait();

        const aliceFromTokenBalanceAfter = await getBalance(alice.address, fromToken.address);
        const aliceToTokenBalanceAfter = await getBalance(alice.address, toToken.address);
        const integratorToTokenBalanceAfter = await getBalance(integratorAddress, toToken.address);
        const providerToTokenBalanceAfter = await getBalance(providerAddress, toToken.address);

        const approveTransactionFee = await getTransactionFeeByReceipt(approveTransactionReceipt);
        const swapTransactionFee = await getTransactionFeeByReceipt(swapTransactionReceipt);

        const expectedIntegratorToTokenBalanceAfter = integratorToTokenBalanceBefore.add(
            expectedToAmount.mul(integratorFee).div(feeDivisor)
        );
        const expectedProviderToTokenBalanceAfter = providerToTokenBalanceBefore.add(
            expectedToAmount.mul(providerBaseFee).div(feeDivisor)
        );
        const expectedAliceToTokenBalanceAfter = aliceToTokenBalanceBefore
            .sub(approveTransactionFee)
            .sub(swapTransactionFee)
            .add(expectedToAmount)
            .sub(expectedToAmount.mul(integratorFee).div(feeDivisor))
            .sub(expectedToAmount.mul(providerBaseFee).div(feeDivisor));
        const expectedAliceFromTokenBalanceAfter = aliceFromTokenBalanceBefore.sub(amount);

        expect(swapTransactionReceipt.status).to.be.eq(1);
        expect(integratorToTokenBalanceAfter).to.be.eq(expectedIntegratorToTokenBalanceAfter);
        expect(providerToTokenBalanceAfter).to.be.eq(expectedProviderToTokenBalanceAfter);
        expect(aliceToTokenBalanceAfter).to.be.eq(expectedAliceToTokenBalanceAfter);
        expect(aliceFromTokenBalanceAfter).to.be.eq(expectedAliceFromTokenBalanceAfter);
    });

    it('Should give correct fee in swap ERC20-ERC20 without promoter.', async () => {
        const fromToken = TOKENS.BUSD;
        const toToken = TOKENS.CAKE;
        const amount = toWei('1', fromToken.decimals);
        const expectedToAmount = toWei('0.092700258038179557', toToken.decimals);
        const oneInchSwapCallData = `0x7c025200000000000000000000000000baf9a5d4b0052359326a6cdab54babaa3a3a964300000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000180000000000000000000000000e9e7cea3dedca5984780bafc599bd69add087d560000000000000000000000000e09fabb73bd3ade0a17ecc321fd13a19e81ce82000000000000000000000000804678fa97d91b974ec2af3c843270886528a9e6000000000000000000000000${dexProxy.address.slice(
            2
        )}0000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000001448cf3bc270b7000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001ca4b757fed6000000000000000000000000804678fa97d91b974ec2af3c843270886528a9e6000000000000000000000000e9e7cea3dedca5984780bafc599bd69add087d560000000000000000000000000e09fabb73bd3ade0a17ecc321fd13a19e81ce820000000000000000002625a0${dexProxy.address.slice(
            2
        )}000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cfee7c08`;
        const integratorFee = availableFeeValues[0];

        await setTokenBalance(fromToken.address, amount, alice.address);

        const aliceFromTokenBalanceBefore = await getBalance(alice.address, fromToken.address);
        const aliceToTokenBalanceBefore = await getBalance(alice.address, toToken.address);
        const integratorToTokenBalanceBefore = await getBalance(integratorAddress, toToken.address);
        const providerToTokenBalanceBefore = await getBalance(providerAddress, toToken.address);

        const busdContract = await ethers.getContractAt('IERC20', fromToken.address, alice);
        await busdContract.approve(dexProxy.address, amount);

        dexProxy = dexProxy.connect(alice);
        const swapTransaction = await dexProxy.swap(
            fromToken.address,
            toToken.address,
            amount,
            oneInchSwapAddress,
            oneInchSwapCallData,
            {
                fee: integratorFee,
                feeTarget: integratorAddress
            }
        );
        const swapTransactionReceipt = await swapTransaction.wait();

        const aliceFromTokenBalanceAfter = await getBalance(alice.address, fromToken.address);
        const aliceToTokenBalanceAfter = await getBalance(alice.address, toToken.address);
        const integratorToTokenBalanceAfter = await getBalance(integratorAddress, toToken.address);
        const providerToTokenBalanceAfter = await getBalance(providerAddress, toToken.address);

        const expectedIntegratorToTokenBalanceAfter = integratorToTokenBalanceBefore.add(
            expectedToAmount.mul(integratorFee).div(feeDivisor)
        );
        const expectedProviderToTokenBalanceAfter = providerToTokenBalanceBefore.add(
            expectedToAmount.mul(providerBaseFee).div(feeDivisor)
        );
        const expectedAliceToTokenBalanceAfter = aliceToTokenBalanceBefore
            .add(expectedToAmount)
            .sub(expectedToAmount.mul(integratorFee).div(feeDivisor))
            .sub(expectedToAmount.mul(providerBaseFee).div(feeDivisor));
        const expectedAliceFromTokenBalanceAfter = aliceFromTokenBalanceBefore.sub(amount);

        expect(swapTransactionReceipt.status).to.be.eq(1);
        expect(integratorToTokenBalanceAfter).to.be.eq(expectedIntegratorToTokenBalanceAfter);
        expect(providerToTokenBalanceAfter).to.be.eq(expectedProviderToTokenBalanceAfter);
        expect(aliceToTokenBalanceAfter).to.be.eq(expectedAliceToTokenBalanceAfter);
        expect(aliceFromTokenBalanceAfter).to.be.eq(expectedAliceFromTokenBalanceAfter);
    });
});
